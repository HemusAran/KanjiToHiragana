/* 	File:		JapaneseAnalysisEngine.h  	Contains:	Interfaces to Japanese analysis engine and Access method   	Version:	Technology: Language Analysis Architecture 1.1.1				Release: To be used with Universal Interfaces 3.2  	Copyright:	1998 by Apple Computer, Inc., all rights reserved  	Bugs?:		Please include the the file and version information (from above) with 				the problem description.  Developers belonging to one of the Apple 				developer programs can submit bug reports to:  					daruma@apple.com */#include <Carbon/Carbon.h>#ifndef __JAPANESEANALYSISENGINE__#define __JAPANESEANALYSISENGINE__#include "Dictionary.h"#include "LanguageAnalysis.h"//------------------------------------------------------------------------------// Names for default environments for Japanese//#define kLAJapaneseKanaKanjiEnvironment			"\pKanaKanjiConversion"#define kLAJapaneseMorphemeAnalysisEnvironment	"\pJapaneseMorphemeAnalysis"#define kLAJapaneseTTSEnvironment				"\pJapaneseTextToSpeech"//------------------------------------------------------------------------------// Default dictionary access method name//#define kAppleJapaneseDefaultAccessMethodName	"\pDAM:Apple Backward Trie Access Method"//------------------------------------------------------------------------------// File cretor for dictionary of Apple Japanese access method//enum {	kAppleJapaneseDictionarySignature			= 'jlan'};//------------------------------------------------------------------------------// Engine limitations//enum {	kMaxInputLengthOfAppleJapaneseEngine		= 200};//------------------------------------------------------------------------------// Dictionary limitations//enum {	kMaxYomiLengthInAppleJapaneseDictionary		= 40,	kMaxKanjiLengthInAppleJapaneseDictionary	= 64};//------------------------------------------------------------------------------// Definitions of information in the path/bundle//typedef MorphemePartOfSpeech	JapanesePartOfSpeech;typedef UInt16					HomographWeight;typedef UInt8					HomographAccent;//------------------------------------------------------------------------------// AE keywords and type definitions for morpheme/homograph information//enum {	keyAEHomographDicInfo			= 'lahd',	keyAEHomographWeight			= 'lahw',	keyAEHomographAccent			= 'laha'};enum {	typeAEHomographDicInfo			= 'lahd',	typeAEHomographWeight			= typeShortInteger,	typeAEHomographAccent			= 'laha'};//------------------------------------------------------------------------------// Structure for dictionary information of homograph//struct HomographDicInfoRec{	DCMDictionaryID		dictionaryID;	DCMUniqueID			uniqueID;};typedef struct HomographDicInfoRec HomographDicInfoRec;//------------------------------------------------------------------------------// Defined field tags of Japanese dictionary//enum {	kDCMJapaneseYomiTag				= 'yomi',	kDCMJapaneseHyokiTag			= 'hyok',	kDCMJapaneseHinshiTag			= 'hins',	kDCMJapaneseWeightTag			= 'hind',	kDCMJapanesePhoneticTag			= 'hton',	kDCMJapaneseAccentTag			= 'acnt',	kDCMJapaneseOnKunReadingTag		= 'OnKn',	kDCMJapaneseFukugouInfoTag		= 'fuku'};enum {	kDCMJapaneseYomiType			= typeUnicodeText,	kDCMJapaneseHyokiType			= typeUnicodeText,	kDCMJapaneseHinshiType			= 'hins',	kDCMJapaneseWeightType			= typeShortInteger,	kDCMJapanesePhoneticType		= typeUnicodeText,	kDCMJapaneseAccentType			= 'byte',	kDCMJapaneseOnKunReadingType	= typeUnicodeText,	kDCMJapaneseFukugouInfoType		= 'fuku'};#endif /* __JAPANESEANALYSISENGINE__ */